.node {
    color: white;
    user-select: none;

    font-size: 14px;
    min-width: 1em;
    width: fit-content;
    height: fit-content;
    margin: 0.1em 0.15em;
    padding: 0.2em;

    font-family: Fira sans;
    text-shadow: 0px 1px 2px black;
    white-space: nowrap;

    background: lch(35 50 calc(40 * var(--depth) + 20));
    border-radius: 0.5em;
    border: 0 solid #fff4;
    border-top-width: 0.1em;

    box-shadow: 0 0.1em 0.15em black;
}

.nodeWrapper {
    width: fit-content;
    height: fit-content;
}

.selected > .node {box-shadow: none; outline: 0.18em solid yellow;}

.node.leaf {background: lch(45 50 calc(40 * var(--depth) + 20));}
.node.op, .node.leaf {text-align: center;}

.node.ident { font-style: italic }
.node.number { font-weight: bold }

.node.unknown {background: black;}
.error {margin: 1em 0; color: red;}

.node.op > .operator {font-family: monospace; line-height: 100%;}
.node > .args {display: flex; flex-direction: row; margin: 0;}

.node.funCall > .args::before {font-size: 20px; content: "(";}
.node.funCall > .args::after {font-size: 20px; content: ")";}
/* Show nothing inside of function placeholder */
.node.funCall > .args > :only-child > .node.placeholder::after {
    content: "";
}

.node.indexList {display: flex; padding: 0; border-radius: 0.7em;}
.node.indexList > .operator {display: none;}
.node.indexList > .args {align-items: center; padding: 0.2em;}
.node.indexList > .args > * > .node {
    border: none;
    box-shadow: none;
    padding: 0.2em;
    border: 0.1em solid #fff4;
}
.node.indexList > .args > :not(:first-child) > .node::before {
    content: ".";
}

.node.funCall {
    display: flex;
    align-items: center;
    font-size: 20px;
}
.node.funCall > .args {
    min-width: 1em;
    min-height: 1.2em;
    height: fit-content;
    margin: 0 0.1em;

    display: flex;
    align-items: center;
}

.node.placeholder {
    background: #0004 !important;
    border-color: #0008;
    min-width: 1em;
    min-height: 1em;
    box-shadow: none;
}
.node.placeholder::after,
.node.unknownOp > .operator::after {
    content: "<?>";
    color: red;
}
